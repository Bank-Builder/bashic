#!/bin/bash

# BASHIC - BASIC Interpreter in Bash
# Version 1.0
# A complete BASIC interpreter written entirely in bash

set -euo pipefail

# ===== UTILITY MODULE =====
#!/bin/bash
# BASHIC Utility Functions Module
# bashic.util.sh - Core utilities, constants, and global variables

# Constants
readonly MAX_ARRAY_SIZE=10000
readonly BASIC_INDEX_BASE=1  # BASIC uses 1-based indexing
readonly MAX_LINE_NUMBER=99999

# Global variables
declare -A PROGRAM_LINES      # Program lines indexed by line number
declare -A NUMERIC_VARS       # Numeric variables
declare -A STRING_VARS        # String variables  
declare -A ARRAYS            # Arrays
declare -a GOSUB_STACK       # GOSUB return stack
declare -a FOR_STACK         # FOR loop stack
declare -a WHILE_STACK       # WHILE loop stack

CURRENT_LINE=0
PROGRAM_COUNTER=0
BASHIC_RUNNING=false
BASHIC_DEBUG=false
BASHIC_INKEY_BUFFER=""  # Buffer for INKEY$ to read characters one at a time
BASHIC_OLD_TTY_SETTINGS=""  # Store original terminal settings
declare -a BASHIC_DATA_ITEMS  # DATA statement items
BASHIC_DATA_POINTER=0  # Current position in DATA_ITEMS
declare -a BASHIC_DATA_LINES  # Line numbers containing DATA statements
declare -a BASHIC_DATA_START_POS  # Starting position in DATA_ITEMS for each DATA line

# Error handling with context
error_with_context() {
    local message="${1:-}"
    local context=""
    
    if [[ ${CURRENT_LINE:-0} -gt 0 ]]; then
        context=" (line $CURRENT_LINE"
        if [[ -n "${PROGRAM_LINES[$CURRENT_LINE]:-}" ]]; then
            context="$context: ${PROGRAM_LINES[$CURRENT_LINE]}"
        fi
        context="$context)"
    fi
    
    log_error "$message$context"
    echo "ERROR: $message$context" >&2
    exit 1
}

# Legacy error function for backward compatibility
error() {
    error_with_context "$1"
}

# Usage information
usage() {
    echo "Usage: $0 [options] <program.bas>"
    echo "Options:"
    echo "  -d, --debug    Enable debug output"
    echo "  -h, --help     Show this help message"
    echo "  -v, --version  Show version information"
    exit 0
}

# Log file for execution tracking - will be set based on input file
BASHIC_LOG_FILE=""

# Debug stack trace variables (separate from BASIC call stack)
declare -a DEBUG_CALL_STACK=()
declare -i DEBUG_STACK_DEPTH=0

# Initialize log file
init_log() {
    echo "=== BASHIC EXECUTION LOG - $(date) ===" > "$BASHIC_LOG_FILE"
    echo "Program: ${PROGRAM_FILE:-UNKNOWN}" >> "$BASHIC_LOG_FILE"
    echo "=========================================" >> "$BASHIC_LOG_FILE"
}

# Push to debug call stack
push_debug_stack() {
    local function_name="$1"
    local args="$2"
    DEBUG_CALL_STACK[$DEBUG_STACK_DEPTH]="$function_name($args)"
    DEBUG_STACK_DEPTH=$((DEBUG_STACK_DEPTH + 1))
    log_debug_stack "ENTER: $function_name($args)"
}

# Pop from debug call stack
pop_debug_stack() {
    if [[ $DEBUG_STACK_DEPTH -gt 0 ]]; then
        DEBUG_STACK_DEPTH=$((DEBUG_STACK_DEPTH - 1))
        local function_name="${DEBUG_CALL_STACK[$DEBUG_STACK_DEPTH]%%(*}"
        log_debug_stack "EXIT:  $function_name"
    fi
}

# Log debug stack trace
log_debug_stack() {
    local message="$1"
    local timestamp=$(date '+%H:%M:%S.%3N')
    local indent=""
    for ((i=0; i<DEBUG_STACK_DEPTH; i++)); do
        indent="  $indent"
    done
    echo "[$timestamp] DEBUG_STACK: $indent$message" >> "$BASHIC_LOG_FILE"
}

# Log execution details
log_execution() {
    local message="$1"
    local timestamp=$(date '+%H:%M:%S.%3N')
    echo "[$timestamp] LINE $CURRENT_LINE: $message" >> "$BASHIC_LOG_FILE"
}

# Log variable values
log_variables() {
    local timestamp=$(date '+%H:%M:%S.%3N')
    echo "[$timestamp] VARIABLES:" >> "$BASHIC_LOG_FILE"
    
    # Log numeric variables
    for var in "${!NUMERIC_VARS[@]}"; do
        echo "[$timestamp]   NUMERIC: $var = ${NUMERIC_VARS[$var]}" >> "$BASHIC_LOG_FILE"
    done
    
    # Log string variables  
    for var in "${!STRING_VARS[@]}"; do
        echo "[$timestamp]   STRING:  $var = \"${STRING_VARS[$var]}\"" >> "$BASHIC_LOG_FILE"
    done
    
    # Log arrays
    for var in "${!ARRAYS[@]}"; do
        echo "[$timestamp]   ARRAY:   $var = ${ARRAYS[$var]}" >> "$BASHIC_LOG_FILE"
    done
}

# Log function results
log_function_result() {
    local function_name="$1"
    local result="$2"
    local timestamp=$(date '+%H:%M:%S.%3N')
    echo "[$timestamp] RESULT: $function_name() = \"$result\"" >> "$BASHIC_LOG_FILE"
}

# Log errors
log_error() {
    local message="$1"
    local timestamp=$(date '+%H:%M:%S.%3N')
    echo "[$timestamp] ERROR: $message" >> "$BASHIC_LOG_FILE"
    echo "[$timestamp] DEBUG_STACK_TRACE:" >> "$BASHIC_LOG_FILE"
    for ((i=DEBUG_STACK_DEPTH-1; i>=0; i--)); do
        local indent=""
        for ((j=0; j<i; j++)); do
            indent="  $indent"
        done
        echo "[$timestamp]   $indent${DEBUG_CALL_STACK[$i]}" >> "$BASHIC_LOG_FILE"
    done
}

# Debug output
debug() {
    if [[ "$BASHIC_DEBUG" == "true" ]]; then
        echo "DEBUG: $1" >&2
    fi
    # Also log to file
    log_execution "DEBUG: $1"
}

# Trim whitespace from string
trim() {
    local str="${1:-}"
    str="${str#"${str%%[![:space:]]*}"}"  # Remove leading whitespace
    str="${str%"${str##*[![:space:]]}"}"  # Remove trailing whitespace
    echo "$str"
}

# Check if string is numeric
is_numeric() {
    local str="${1:-}"
    [[ "$str" =~ ^-?[0-9]+(\.[0-9]+)?$ ]]
}

# Generic stack push function
stack_push() {
    local stack_name="$1"
    local value="$2"
    
    case "$stack_name" in
        "GOSUB_STACK")
            GOSUB_STACK+=("$value")
            ;;
        "FOR_STACK")
            FOR_STACK+=("$value")
            ;;
        "WHILE_STACK")
            WHILE_STACK+=("$value")
            ;;
        *)
            error "Unknown stack: $stack_name"
            ;;
    esac
}

# Generic stack pop function
stack_pop() {
    local stack_name="$1"
    local result=""
    
    case "$stack_name" in
        "GOSUB_STACK")
            if [[ ${#GOSUB_STACK[@]} -gt 0 ]]; then
                result="${GOSUB_STACK[-1]}"
                unset GOSUB_STACK[-1]
            fi
            ;;
        "FOR_STACK")
            if [[ ${#FOR_STACK[@]} -gt 0 ]]; then
                result="${FOR_STACK[-1]}"
                unset FOR_STACK[-1]
            fi
            ;;
        "WHILE_STACK")
            if [[ ${#WHILE_STACK[@]} -gt 0 ]]; then
                result="${WHILE_STACK[-1]}"
                unset WHILE_STACK[-1]
            fi
            ;;
        *)
            error "Unknown stack: $stack_name"
            ;;
    esac
    
    echo "$result"
}

# ===== MATH MODULE =====
#!/bin/bash
# BASHIC Math Functions Module
# bashic.math.sh - Mathematical functions (ABS, INT, SGN, SQR)

# Mathematical functions
math_abs() {
    local n="${1:-0}"
    if [[ $(echo "$n < 0" | bc -l 2>/dev/null || echo "0") == "1" ]]; then
        echo "$n * -1" | bc -l 2>/dev/null || echo "${n#-}"
    else
        echo "$n"
    fi
}

math_int() {
    local n="${1:-0}"
    echo "$n" | cut -d. -f1
}

math_sgn() {
    local n="${1:-0}"
    if [[ "$n" =~ ^-.*$ ]]; then
        echo "-1"
    elif [[ "$n" == "0" || "$n" == "0.0" ]]; then
        echo "0"
    else
        echo "1"
    fi
}

math_sqr() {
    local n="${1:-0}"
    # Simple square root using bash arithmetic (limited precision)
    if command -v bc >/dev/null 2>&1; then
        echo "sqrt($n)" | bc -l
    else
        # Fallback: Newton's method approximation
        local x="$n"
        local prev=0
        while [[ "$x" != "$prev" ]]; do
            prev="$x"
            x=$(( (x + n/x) / 2 ))
        done
        echo "$x"
    fi
}

math_rnd() {
    local n="${1:-1}"
    # Random number between 0 and 1
    # Use RANDOM (0-32767) and scale to 0-1
    local result=$(echo "scale=6; $RANDOM / 32767" | bc -l 2>/dev/null || echo "0.$RANDOM")
    # Ensure leading zero for values < 1
    if [[ "$result" =~ ^\. ]]; then
        result="0${result}"
    fi
    echo "$result"
}

# ===== KEYBOARD MODULE =====
#!/bin/bash
# BASHIC Keyboard Module
# bashic.kbd.sh - Keyboard input handling

# Global variables for keyboard input
BASHIC_INKEY_BUFFER=""  # Buffer for non-interactive input
BASHIC_TTY_SETTINGS=""  # Store original terminal settings
BASHIC_INKEY_SEMAPHORE=0  # Semaphore counter for INKEY$ (0 = available, >0 = busy)
BASHIC_INKEY_TIMEOUT=1  # Default timeout for INKEY$ (1 second)

# Initialize keyboard handling
init_keyboard() {
    # Check if we're in a terminal - try multiple methods
    local is_terminal=false
    
    # Method 1: Check if stdin is a terminal
    if [ -t 0 ]; then
        is_terminal=true
    fi
    
    # Method 2: Check if we have a controlling terminal
    if [ -t 1 ] && [ -c /dev/tty ]; then
        is_terminal=true
    fi
    
    # Method 3: Check if TERM environment variable is set AND stdin is a terminal
    # Only consider it a terminal if stdin is actually connected to a terminal
    if [ -n "$TERM" ] && [ -t 0 ]; then
        is_terminal=true
    fi
    
    # Force interactive mode for testing
    if [ "${BASHIC_FORCE_INTERACTIVE:-}" = "true" ]; then
        debug "Forcing interactive mode via BASHIC_FORCE_INTERACTIVE"
        is_terminal=true
    fi
    
    if [ "$is_terminal" = true ]; then
        debug "Terminal detected - setting up interactive mode"
        # Try to get TTY settings, but don't fail if stty doesn't work
        BASHIC_TTY_SETTINGS=$(stty -g 2>/dev/null || echo "raw")
        debug "stty -g returned: '$BASHIC_TTY_SETTINGS'"
        
        # Try to set raw mode, but don't fail if it doesn't work
        if [ -n "$BASHIC_TTY_SETTINGS" ] && [ "$BASHIC_TTY_SETTINGS" != "raw" ]; then
            stty raw -echo min 0 time 0 2>/dev/null || true
            debug "stty raw command executed"
        else
            debug "Using fallback terminal mode"
            BASHIC_TTY_SETTINGS="fallback"
        fi
    else
        debug "No terminal detected - using non-interactive mode"
        BASHIC_TTY_SETTINGS=""
        # Read all available input into buffer for non-interactive mode
        BASHIC_INKEY_BUFFER=$(timeout 0.1 cat 2>/dev/null || echo "")
        debug "Non-interactive mode - loaded input buffer: '$BASHIC_INKEY_BUFFER'"
    fi
}

# Function to convert key to readable name
key_name() {
    local key="$1"
    case "$key" in
        $'\r') echo "ENTER" ;;
        $'\e') echo "ESC" ;;
        $'\t') echo "TAB" ;;
        $'\b'|$'\x7f') echo "BACKSPACE" ;;  # handle DEL too
        $' ') echo " " ;;
        *) echo "$key" ;;
    esac
}

# Function to handle cleanup
cleanup_keyboard() {
    # Restore terminal settings if we're in a terminal
    if [ -n "$BASHIC_TTY_SETTINGS" ]; then
        stty "$BASHIC_TTY_SETTINGS" 2>/dev/null || true
    fi
}

# Get a single character from keyboard or buffer
get_key() {
    local timeout="${1:-1}"  # Default to 1 second timeout
    local char=""
    
    # Debug TTY settings
    debug "get_key() - BASHIC_TTY_SETTINGS='$BASHIC_TTY_SETTINGS'"
    
    # Check if we're in interactive mode
    if [ -n "$BASHIC_TTY_SETTINGS" ]; then
        debug "Interactive mode - reading from terminal"
        # Try different methods to read input
        if [ "$BASHIC_TTY_SETTINGS" = "fallback" ]; then
            # Fallback method - use timeout to avoid blocking
            debug "Using fallback input method - non-blocking read"
            char=$(dd bs=1 count=1 < /dev/tty 2>/dev/null | tr -d '\0' || echo "")
        else
            # Standard method - use read to get single character
            debug "Using standard input method - reading single character"
            read -n 1 char 2>/dev/null || char=""
        fi
        debug "get_key() read character: '$char'"
    else
        debug "Non-interactive mode - using buffer"
        # Non-interactive mode - read from buffer or stdin
        if [ -n "$BASHIC_INKEY_BUFFER" ]; then
            # Use buffered input
            char="${BASHIC_INKEY_BUFFER:0:1}"
            BASHIC_INKEY_BUFFER="${BASHIC_INKEY_BUFFER:1}"
            debug "get_key() read from buffer: '$char', remaining: '$BASHIC_INKEY_BUFFER'"
        else
            # Read directly from stdin
            char=$(dd bs=1 count=1 2>/dev/null || echo "")
            debug "get_key() read from stdin: '$char'"
        fi
    fi
    
    echo "$char"
}



# INKEY$ function for BASIC compatibility - SEMAPHORE PROTECTED
INKEY_STR() {
    # Wait while semaphore is > 0 (another call is active)
    local wait_count=0
    while [ $BASHIC_INKEY_SEMAPHORE -gt 0 ] && [ $wait_count -lt 100 ]; do
        debug "INKEY$ waiting - semaphore: $BASHIC_INKEY_SEMAPHORE, count: $wait_count"
        sleep 0.08  # Longer wait for background process cleanup
        wait_count=$((wait_count + 1))
    done
    
    if [ $wait_count -ge 100 ]; then
        debug "INKEY$ timeout waiting - forcing semaphore reset"
        BASHIC_INKEY_SEMAPHORE=0
    fi
    
    # Semaphore: increment counter to claim access
    BASHIC_INKEY_SEMAPHORE=$((BASHIC_INKEY_SEMAPHORE + 1))
    debug "INKEY$ semaphore incremented to: $BASHIC_INKEY_SEMAPHORE"
    
    # Force reset if semaphore is stuck
    if [ $BASHIC_INKEY_SEMAPHORE -gt 10 ]; then
        debug "INKEY$ semaphore stuck - forcing reset"
        BASHIC_INKEY_SEMAPHORE=1
    fi
    
    debug "INKEY$ acquired access - semaphore: $BASHIC_INKEY_SEMAPHORE"
    
    local timeout="${1:-0}"  # Default to no timeout
    local key=$(get_key "$timeout")
    
    debug "INKEY$ got key: '$key'"
    
    if [ -n "$key" ]; then
        echo "$key"
    else
        echo ""
    fi
    
    # Semaphore: decrement counter to release access
    BASHIC_INKEY_SEMAPHORE=$((BASHIC_INKEY_SEMAPHORE - 1))
    debug "INKEY$ released access - semaphore: $BASHIC_INKEY_SEMAPHORE"
}

# Set up cleanup trap - temporarily disabled
# trap cleanup_keyboard EXIT
# ===== STRING MODULE =====
#!/bin/bash
# BASHIC String Functions Module
# bashic.string.sh - String functions (LEN, LEFT$, RIGHT$, MID$, ASC, CHR$, VAL, STR$)

# String functions
str_len() {
    echo "${#1}"
}

str_left() {
    local str="${1:-}"
    local len="$2"
    echo "${str:0:$len}"
}

str_right() {
    local str="${1:-}"
    local len="$2"
    local str_len="${#str}"
    local start=$((str_len - len))
    [[ $start -lt 0 ]] && start=0
    echo "${str:$start}"
}

str_mid() {
    local str="${1:-}"
    local start="$2"
    local len="${3:-${#str}}"
    start=$((start - BASIC_INDEX_BASE))  # BASIC uses 1-based indexing
    [[ $start -lt 0 ]] && start=0
    echo "${str:$start:$len}"
}

str_asc() {
    local str="${1:-}"
    [[ -z "$str" ]] && echo "0" && return
    printf "%d" "'${str:0:1}"
}

str_chr() {
    local code="$1"
    printf "\\$(printf "%03o" "$code")"
}

str_val() {
    local str="${1:-}"
    # Extract numeric part from beginning of string
    if [[ "$str" =~ ^[[:space:]]*(-?[0-9]+(\.[0-9]+)?) ]]; then
        echo "${BASH_REMATCH[1]}"
    else
        echo "0"
    fi
}

str_space() {
    local n="$1"
    printf '%*s' "$n" ''
}

str_time() {
    date +%H:%M:%S
}

str_tab() {
    local col="$1"
    # Return spaces to reach column position
    # For simplicity, just return N spaces
    printf '%*s' "$col" ''
}

# ===== SCREEN MODULE =====
#!/bin/bash
# BASHIC Screen Functions Module
# bashic.screen.sh - Screen control using ANSI escape codes

# Global screen state
CURRENT_FG_COLOR=37  # White foreground
CURRENT_BG_COLOR=40  # Black background
SCREEN_WIDTH=80

# Clear screen
screen_cls() {
    echo -ne "\033[2J\033[H"
}

# Position cursor at row, column
screen_locate() {
    local row="${1:-1}"
    local col="${2:-1}"
    local cursor_visible="${3:-1}"  # Optional cursor visibility (ignored)
    
    # ANSI escape: ESC[row;colH
    echo -ne "\033[${row};${col}H"
}

# Set text and background color
screen_color() {
    local fg="${1:-7}"  # Default white
    local bg="${2:-0}"  # Default black
    
    # Convert BASIC color codes (0-15) to ANSI (30-37, 90-97 for fg; 40-47, 100-107 for bg)
    # BASIC: 0=black, 1=blue, 2=green, 3=cyan, 4=red, 5=magenta, 6=brown/yellow, 7=white
    # BASIC: 8-15 are bright versions
    
    local ansi_fg=37
    local ansi_bg=40
    
    # Map foreground color
    case "$fg" in
        0) ansi_fg=30 ;;  # Black
        1) ansi_fg=34 ;;  # Blue
        2) ansi_fg=32 ;;  # Green
        3) ansi_fg=36 ;;  # Cyan
        4) ansi_fg=31 ;;  # Red
        5) ansi_fg=35 ;;  # Magenta
        6) ansi_fg=33 ;;  # Yellow
        7) ansi_fg=37 ;;  # White
        8) ansi_fg=90 ;;  # Bright Black (Gray)
        9) ansi_fg=94 ;;  # Bright Blue
        10) ansi_fg=92 ;; # Bright Green
        11) ansi_fg=96 ;; # Bright Cyan
        12) ansi_fg=91 ;; # Bright Red
        13) ansi_fg=95 ;; # Bright Magenta
        14) ansi_fg=93 ;; # Bright Yellow
        15) ansi_fg=97 ;; # Bright White
    esac
    
    # Map background color
    case "$bg" in
        0) ansi_bg=40 ;;  # Black
        1) ansi_bg=44 ;;  # Blue
        2) ansi_bg=42 ;;  # Green
        3) ansi_bg=46 ;;  # Cyan
        4) ansi_bg=41 ;;  # Red
        5) ansi_bg=45 ;;  # Magenta
        6) ansi_bg=43 ;;  # Yellow
        7) ansi_bg=47 ;;  # White
    esac
    
    CURRENT_FG_COLOR=$ansi_fg
    CURRENT_BG_COLOR=$ansi_bg
    
    echo -ne "\033[${ansi_fg};${ansi_bg}m"
}

# Beep
screen_beep() {
    echo -ne "\a"
}

# Sound - play tone at frequency for duration
screen_sound() {
    local frequency="$1"
    local duration_ms="$2"
    
    # Convert milliseconds to seconds for ffplay
    local duration_sec=$(echo "scale=3; $duration_ms / 1000" | bc -l 2>/dev/null || echo "0.25")
    
    # Use ffplay to generate sine wave tone
    # -nodisp: no display window
    # -autoexit: exit when done
    # -f lavfi: use lavfi (audio filter)
    # -i sine: generate sine wave at specified frequency and duration
    if command -v ffplay >/dev/null 2>&1; then
        ffplay -nodisp -autoexit -f lavfi -i "sine=f=${frequency}:d=${duration_sec}" >/dev/null 2>&1 &
    else
        # Fallback to beep if ffplay not available
        echo -ne "\a"
    fi
}

# Set screen width (just store, don't actually resize)
screen_width() {
    local width="$1"
    SCREEN_WIDTH=$width
    # Note: Can't actually resize terminal from bash
}


# ===== EVAL MODULE =====
#!/bin/bash
# BASHIC Expression Evaluation Module
# bashic.eval.sh - Expression evaluation, operators, and condition evaluation

# Evaluate expression (optimized with single regex pattern)
evaluate_expression() {
    local expr="${1:-}"
    expr=$(trim "$expr")
    
    push_debug_stack "evaluate_expression" "\"$expr\""
    debug "Evaluating expression: $expr"
    
    # Handle string literals
    if [[ "$expr" =~ ^\"(.*)\"$ ]]; then
        echo "${BASH_REMATCH[1]}"
        return
    fi
    
    # Handle special functions (before string variables)
    if [[ "$expr" == "INKEY$" ]]; then
        # Use the kbd module's INKEY$ function
        INKEY_STR
        return
    fi
    
    if [[ "$expr" == "TIME$" ]]; then
        # Return current time as HH:MM:SS
        str_time
        return
    fi
    
    # Handle string variables
    if [[ "$expr" =~ ^[A-Z][A-Z0-9_]*\$$ ]]; then
        local var_name="$expr"
        echo "${STRING_VARS[$var_name]:-}"
        return
    fi
    
    # Handle numeric variables (including integer variables with % suffix)
    if [[ "$expr" =~ ^[A-Z][A-Z0-9_]*%?$ ]]; then
        local var_name="$expr"
        echo "${NUMERIC_VARS[$var_name]:-0}"
        return
    fi
    
    # Handle numeric literals
    if is_numeric "$expr"; then
        echo "$expr"
        return
    fi
    
    # Handle function calls (check before array access)
    local func_regex='^([A-Z]+\$?)\(([^)]*)\)$'
    if [[ "$expr" =~ $func_regex ]]; then
        local func="${BASH_REMATCH[1]}"
        local arg="${BASH_REMATCH[2]}"
        
        # Check if it's a known function (not an array)
        case "$func" in
            "ABS")
                arg=$(evaluate_expression "$arg")
                math_abs "$arg"
                return
                ;;
            "INT")
                arg=$(evaluate_expression "$arg")
                math_int "$arg"
                return
                ;;
            "SGN")
                arg=$(evaluate_expression "$arg")
                math_sgn "$arg"
                return
                ;;
            "SQR")
                arg=$(evaluate_expression "$arg")
                math_sqr "$arg"
                return
                ;;
            "RND")
                arg=$(evaluate_expression "$arg")
                math_rnd "$arg"
                return
                ;;
            "LEN")
                arg=$(evaluate_expression "$arg")
                str_len "$arg"
                return
                ;;
            "LEFT$")
                if [[ "$arg" =~ ^([^,]+),([^,]+)$ ]]; then
                    local str_arg="${BASH_REMATCH[1]}"
                    local len_arg="${BASH_REMATCH[2]}"
                    str_arg=$(evaluate_expression "$(trim "$str_arg")")
                    len_arg=$(evaluate_expression "$(trim "$len_arg")")
                    str_left "$str_arg" "$len_arg"
                    return
                fi
                ;;
            "RIGHT$")
                if [[ "$arg" =~ ^([^,]+),([^,]+)$ ]]; then
                    local str_arg="${BASH_REMATCH[1]}"
                    local len_arg="${BASH_REMATCH[2]}"
                    str_arg=$(evaluate_expression "$(trim "$str_arg")")
                    len_arg=$(evaluate_expression "$(trim "$len_arg")")
                    str_right "$str_arg" "$len_arg"
                    return
                fi
                ;;
            "MID$")
                if [[ "$arg" =~ ^([^,]+),([^,]+),([^,]+)$ ]]; then
                    local str_arg="${BASH_REMATCH[1]}"
                    local start_arg="${BASH_REMATCH[2]}"
                    local len_arg="${BASH_REMATCH[3]}"
                    str_arg=$(evaluate_expression "$(trim "$str_arg")")
                    start_arg=$(evaluate_expression "$(trim "$start_arg")")
                    len_arg=$(evaluate_expression "$(trim "$len_arg")")
                    str_mid "$str_arg" "$start_arg" "$len_arg"
                    return
                fi
                ;;
            "ASC")
                arg=$(evaluate_expression "$arg")
                str_asc "$arg"
                return
                ;;
            "CHR$")
                arg=$(evaluate_expression "$arg")
                str_chr "$arg"
                return
                ;;
            "VAL")
                arg=$(evaluate_expression "$arg")
                str_val "$arg"
                return
                ;;
            "STR$")
                arg=$(evaluate_expression "$arg")
                echo "$arg"
                return
                ;;
            "SPACE$")
                arg=$(evaluate_expression "$arg")
                str_space "$arg"
                return
                ;;
            "TAB")
                arg=$(evaluate_expression "$arg")
                str_tab "$arg"
                return
                ;;
            "INKEY")
                # Handle INKEY() function call (same as INKEY$)
                INKEY_STR
                return
                ;;
            *)
                # Not a known function, might be an array - fall through to array handling
                ;;
        esac
    fi
    
    # Handle array access (after function calls)
    local array_regex='^([A-Z][A-Z0-9_]*)\(([^)]+)\)$'
    if [[ "$expr" =~ $array_regex ]]; then
        local array_name="${BASH_REMATCH[1]}"
        local index_expr="${BASH_REMATCH[2]}"
        
        # Evaluate the index expression
        # Handle 2D arrays with comma-separated indices
        local index
        if [[ "$index_expr" =~ ^([^,]+),([^,]+)$ ]]; then
            # 2D array: evaluate both indices
            local index1=$(evaluate_expression "${BASH_REMATCH[1]}")
            local index2=$(evaluate_expression "${BASH_REMATCH[2]}")
            index="${index1},${index2}"
        else
            # 1D array: evaluate single index
            index=$(evaluate_expression "$index_expr")
        fi
        
        # Check if array exists
        if [[ -z "${ARRAYS[$array_name]:-}" ]]; then
            error "Array not declared: $array_name"
        fi
        
        # Get array type and size
        local array_info="${ARRAYS[$array_name]}"
        local array_type="${array_info%:*}"
        local array_size="${array_info#*:}"
        
        debug "Array access: array_name='${array_name:-UNKNOWN}', array_info='${array_info:-UNKNOWN}', array_type='${array_type:-UNKNOWN}', array_size='${array_size:-UNKNOWN}', index='${index:-UNKNOWN}'"
        log_execution "Array access: ${array_name:-UNKNOWN}(${index:-UNKNOWN}) - size: ${array_size:-UNKNOWN}"
        
        # Check bounds
        if [[ ${index:-0} -lt 0 || ${index:-0} -gt ${array_size:-0} ]]; then
            debug "Array bounds check failed: array_name='${array_name:-UNKNOWN}', index=${index:-0}, array_size=${array_size:-0}"
            error "Array index out of bounds: ${array_name:-UNKNOWN}(${index:-0})"
        fi
        
        # Return array element value
        local element_name="${array_name}_${index}"
        if [[ "$array_type" == "string" ]]; then
            echo "${STRING_VARS[$element_name]:-}"
        else
            echo "${NUMERIC_VARS[$element_name]:-0}"
        fi
        return
    fi
    
    # Handle MOD operator (word-based operator)
    if [[ "$expr" =~ ^([A-Z0-9_]+)\ +MOD\ +([A-Z0-9_]+)$ ]]; then
        local left="${BASH_REMATCH[1]}"
        local right="${BASH_REMATCH[2]}"
        
        left=$(trim "$left")
        right=$(trim "$right")
        left=$(evaluate_expression "$left")
        right=$(evaluate_expression "$right")
        
        echo "$((left % right))"
        return
    fi
    
    # Handle string concatenation (+ operator) with proper quote handling
    # Find the + operator that's outside quotes
    local i=0
    local in_quotes=0
    local plus_pos=-1
    
    while [[ $i -lt ${#expr} ]]; do
        local char="${expr:$i:1}"
        if [[ "$char" == "\"" ]]; then
            in_quotes=$((!in_quotes))
        elif [[ "$char" == "+" && $in_quotes -eq 0 ]]; then
            plus_pos=$i
            break
        fi
        i=$((i + 1))
    done
    
    if [[ $plus_pos -ge 0 ]]; then
        # Found + operator outside quotes
        local left="${expr:0:$plus_pos}"
        local right="${expr:$((plus_pos + 1))}"
        
        left=$(trim "$left")
        right=$(trim "$right")
        
        # Evaluate both sides
        local left_val=$(evaluate_expression "$left")
        local right_val=$(evaluate_expression "$right")
        
        # Check if this is string concatenation (not arithmetic)
        if [[ ! "$left_val" =~ ^-?[0-9]+(\.[0-9]+)?$ ]] || [[ ! "$right_val" =~ ^-?[0-9]+(\.[0-9]+)?$ ]]; then
            # String concatenation
            echo "${left_val}${right_val}"
            return
        fi
        # If both are numeric, fall through to arithmetic handling
    fi
    
    # Handle simple arithmetic (symbol-based operators)
    if [[ "$expr" =~ ^([A-Z0-9_]+)\ *(\+|\-|\*|/)\ *([A-Z0-9_]+)$ ]]; then
        local left="${BASH_REMATCH[1]}"
        local op="${BASH_REMATCH[2]}"
        local right="${BASH_REMATCH[3]}"
        
        left=$(trim "$left")
        right=$(trim "$right")
        left=$(evaluate_expression "$left")
        right=$(evaluate_expression "$right")
        
        case "$op" in
            "+") echo "$((left + right))" ;;
            "-") echo "$((left - right))" ;;
            "*") echo "$((left * right))" ;;
            "/") echo "$((left / right))" ;;
        esac
        return
    fi
    
    # Default: return as-is
    echo "$expr"
    
    pop_debug_stack
}

# Evaluate simple condition
evaluate_condition() {
    local condition="${1:-}"
    local result=false
    
    if [[ "$condition" =~ ^([^<>=!]+)[[:space:]]*([<>=!]+)[[:space:]]*(.+)$ ]]; then
        local left="${BASH_REMATCH[1]}"
        local op="${BASH_REMATCH[2]}"
        local right="${BASH_REMATCH[3]}"
        
        left=$(evaluate_expression "$(trim "$left")")
        right=$(evaluate_expression "$(trim "$right")")
        
        case "$op" in
            "=")  [[ "$left" == "$right" ]] && result=true ;;
            "<>") [[ "$left" != "$right" ]] && result=true ;;
            "<")  
                # Check if both are numeric
                if [[ "$left" =~ ^-?[0-9]+(\.[0-9]+)?$ ]] && [[ "$right" =~ ^-?[0-9]+(\.[0-9]+)?$ ]]; then
                    [[ $left -lt $right ]] && result=true
                else
                    # String comparison (lexicographic)
                    [[ "$left" < "$right" ]] && result=true
                fi
                ;;
            ">")  
                # Check if both are numeric
                if [[ "$left" =~ ^-?[0-9]+(\.[0-9]+)?$ ]] && [[ "$right" =~ ^-?[0-9]+(\.[0-9]+)?$ ]]; then
                    [[ $left -gt $right ]] && result=true
                else
                    # String comparison (lexicographic)
                    [[ "$left" > "$right" ]] && result=true
                fi
                ;;
            "<=") 
                # Check if both are numeric
                if [[ "$left" =~ ^-?[0-9]+(\.[0-9]+)?$ ]] && [[ "$right" =~ ^-?[0-9]+(\.[0-9]+)?$ ]]; then
                    [[ $left -le $right ]] && result=true
                else
                    # String comparison (lexicographic)
                    [[ "$left" < "$right" ]] || [[ "$left" == "$right" ]] && result=true
                fi
                ;;
            ">=") 
                # Check if both are numeric
                if [[ "$left" =~ ^-?[0-9]+(\.[0-9]+)?$ ]] && [[ "$right" =~ ^-?[0-9]+(\.[0-9]+)?$ ]]; then
                    [[ $left -ge $right ]] && result=true
                else
                    # String comparison (lexicographic)
                    [[ "$left" > "$right" ]] || [[ "$left" == "$right" ]] && result=true
                fi
                ;;
        esac
    fi
    
    echo "$result"
}

# Evaluate compound condition with AND/OR/NOT operators
evaluate_compound_condition() {
    local condition="${1:-}"
    
    # Handle NOT operator (highest precedence)
    if [[ "$condition" =~ ^NOT[[:space:]]+(.+)$ ]]; then
        local inner_condition="${BASH_REMATCH[1]}"
        
        # Recursively evaluate the inner condition
        local inner_result=$(evaluate_compound_condition "$inner_condition")
        
        # NOT logic: true becomes false, false becomes true
        if [[ "$inner_result" == "true" ]]; then
            echo "false"
        else
            echo "true"
        fi
        return
    fi
    
    # Handle AND operator (higher precedence)
    if [[ "$condition" =~ ^(.+)[[:space:]]+AND[[:space:]]+(.+)$ ]]; then
        local left_cond="${BASH_REMATCH[1]}"
        local right_cond="${BASH_REMATCH[2]}"
        
        # Recursively evaluate both sides
        local left_result=$(evaluate_compound_condition "$left_cond")
        local right_result=$(evaluate_compound_condition "$right_cond")
        
        if [[ "$left_result" == "true" && "$right_result" == "true" ]]; then
            echo "true"
        else
            echo "false"
        fi
        return
    fi
    
    # Handle OR operator (lower precedence)
    if [[ "$condition" =~ ^(.+)[[:space:]]+OR[[:space:]]+(.+)$ ]]; then
        local left_cond="${BASH_REMATCH[1]}"
        local right_cond="${BASH_REMATCH[2]}"
        
        # Recursively evaluate both sides
        local left_result=$(evaluate_compound_condition "$left_cond")
        local right_result=$(evaluate_compound_condition "$right_cond")
        
        if [[ "$left_result" == "true" || "$right_result" == "true" ]]; then
            echo "true"
        else
            echo "false"
        fi
        return
    fi
    
    # No logical operators - evaluate as simple condition
    evaluate_condition "$condition"
}

# ===== CONTROL MODULE =====
execute_for() {
    local stmt="${1:-}"
    stmt=$(trim "$stmt")
    
    if [[ "$stmt" =~ ^([A-Za-z][A-Za-z0-9_]*)[[:space:]]*=[[:space:]]*([^[:space:]]+)[[:space:]]+TO[[:space:]]+([^[:space:]]+)([[:space:]]+STEP[[:space:]]+([^[:space:]]+))?$ ]]; then
        local var_name="${BASH_REMATCH[1]}"
        local start_val="${BASH_REMATCH[2]}"
        local end_val="${BASH_REMATCH[3]}"
        local step_val="${BASH_REMATCH[5]:-1}"
        
        start_val=$(evaluate_expression "$start_val")
        end_val=$(evaluate_expression "$end_val")
        step_val=$(evaluate_expression "$step_val")
        
        # Initialize the FOR loop variable immediately
        NUMERIC_VARS["$var_name"]="$start_val"
        
        # Push FOR loop info onto stack
        # Store the FOR line so NEXT can jump back to loop body
        stack_push FOR_STACK "$var_name:$end_val:$step_val:$CURRENT_LINE"
        
        debug "FOR $var_name = $start_val TO $end_val STEP $step_val at line $CURRENT_LINE"
        debug "FOR variable $var_name initialized to $start_val"
    else
        error "Invalid FOR statement: $stmt"
    fi
}
execute_next() {
    local stmt="${1:-}"
    
    if [[ ${#FOR_STACK[@]} -eq 0 ]]; then
        error "NEXT without FOR"
    fi
    
    local for_info="${FOR_STACK[-1]}"
    local var_name="${for_info%%:*}"
    local rest="${for_info#*:}"
    local end_val="${rest%%:*}"
    rest="${rest#*:}"
    local step_val="${rest%%:*}"
    local for_line="${rest#*:}"
    
    # Get current variable value and increment
    local current_val="${NUMERIC_VARS[$var_name]}"
    
    # Check if we need floating point arithmetic
    if [[ "$current_val" =~ \. ]] || [[ "$step_val" =~ \. ]]; then
        # Use bc for floating point arithmetic
        local new_val=$(echo "scale=10; $current_val + $step_val" | bc -l)
        # Remove trailing zeros and decimal point if not needed
        new_val=$(echo "$new_val" | sed 's/\.0*$//')
    else
        # Use bash arithmetic for integers
        local new_val=$((current_val + step_val))
    fi
    
    NUMERIC_VARS["$var_name"]="$new_val"
    
    # Check if loop should continue
    local continue_loop=false
    
    # Check if we need floating point comparison
    if [[ "$new_val" =~ \. ]] || [[ "$end_val" =~ \. ]] || [[ "$step_val" =~ \. ]]; then
        # Use bc for floating point comparison
        local step_positive=$(echo "$step_val > 0" | bc -l)
        if [[ "$step_positive" == "1" ]]; then
            local result=$(echo "$new_val <= $end_val" | bc -l)
            [[ "$result" == "1" ]] && continue_loop=true
        else
            local result=$(echo "$new_val >= $end_val" | bc -l)
            [[ "$result" == "1" ]] && continue_loop=true
        fi
    else
        # Use bash arithmetic for integer comparison
        if [[ $step_val -gt 0 ]]; then
            [[ $new_val -le $end_val ]] && continue_loop=true
        else
            [[ $new_val -ge $end_val ]] && continue_loop=true
        fi
    fi
    
    if [[ "$continue_loop" == "true" ]]; then
        # Jump to the line AFTER the FOR statement (the loop body starts there)
        # Get the next line after FOR and set that as current
        # This way the loop body executes again without re-executing FOR
        local next_after_for=$(find_next_line "$for_line")
        if [[ -n "$next_after_for" ]]; then
            CURRENT_LINE="$next_after_for"
            debug "NEXT: Continue loop, $var_name = $new_val, jumping to line $CURRENT_LINE (after FOR at $for_line)"
        else
            error "NEXT: No line after FOR"
        fi
    else
        # Pop FOR stack and continue
        stack_pop FOR_STACK >/dev/null
        debug "NEXT: End loop, $var_name = $new_val"
    fi
}
execute_while() {
    local stmt="${1:-}"
    stmt=$(trim "$stmt")
    
    # Store the condition and current line for the loop
    # Push WHILE loop info onto stack: "condition:line_num"
    stack_push WHILE_STACK "$stmt:$CURRENT_LINE"
    
    debug "WHILE $stmt"
}
execute_wend() {
    local stmt="${1:-}"
    
    if [[ ${#WHILE_STACK[@]} -eq 0 ]]; then
        error "WEND without WHILE"
    fi
    
    local while_info="${WHILE_STACK[-1]}"
    local condition="${while_info%:*}"
    local while_line="${while_info#*:}"
    
    # Evaluate the WHILE condition (using enhanced compound condition evaluator)
    local result=$(evaluate_compound_condition "$condition")
    
    debug "WEND: condition '$condition' evaluated to $result"
    
    if [[ "$result" == "true" ]]; then
        # Jump to the line AFTER the WHILE statement (loop body starts there)
        local next_after_while=$(find_next_line "$while_line")
        if [[ -n "$next_after_while" ]]; then
            CURRENT_LINE="$next_after_while"
            debug "WEND: Continue loop, jumping to line $CURRENT_LINE (after WHILE at $while_line)"
        else
            error "WEND: No line after WHILE"
        fi
    else
        # Pop WHILE stack and continue (same pattern as FOR/NEXT)
        stack_pop WHILE_STACK >/dev/null
        debug "WEND: End loop"
    fi
}
execute_if() {
    local stmt="${1:-}"
    stmt=$(trim "$stmt")
    
    if [[ "$stmt" =~ ^(.+)[[:space:]]+THEN[[:space:]]+(.*)$ ]]; then
        local condition="${BASH_REMATCH[1]}"
        local then_else_part="${BASH_REMATCH[2]}"
        
        # Check for ELSE clause
        local then_part=""
        local else_part=""
        
        if [[ "$then_else_part" =~ ^(.+)[[:space:]]+ELSE[[:space:]]+(.*)$ ]]; then
            then_part="${BASH_REMATCH[1]}"
            else_part="${BASH_REMATCH[2]}"
            debug "IF with ELSE: then='$then_part', else='$else_part'"
        else
            then_part="$then_else_part"
            debug "IF without ELSE: then='$then_part'"
        fi
        
        # Evaluate condition using enhanced compound condition evaluator
        local result=$(evaluate_compound_condition "$condition")
        
        debug "IF condition '$condition' evaluated to $result"
        
        if [[ "$result" == "true" ]]; then
            # Execute THEN part (reuse existing logic)
            if is_numeric "$then_part"; then
                CURRENT_LINE="$then_part"
                debug "IF: GOTO line $then_part"
            else
                execute_statement "$then_part"
            fi
        elif [[ -n "$else_part" ]]; then
            # Execute ELSE part (same logic as THEN)
            if is_numeric "$else_part"; then
                CURRENT_LINE="$else_part"
                debug "IF: ELSE GOTO line $else_part"
            else
                execute_statement "$else_part"
            fi
        fi
    else
        error "Invalid IF statement: $stmt"
    fi
}
execute_gosub() {
    local line_num="$1"
    
    if [[ -z "${PROGRAM_LINES[$line_num]:-}" ]]; then
        error "GOSUB to undefined line: $line_num"
    fi
    
    # Push return address onto stack
    local next_line=$(find_next_line "$CURRENT_LINE")
    stack_push GOSUB_STACK "$next_line"
    
    CURRENT_LINE="$line_num"
    debug "GOSUB to line $line_num, return to $next_line"
}
execute_return() {
    local return_line=$(stack_pop GOSUB_STACK)
    if [[ $? -ne 0 ]]; then
        error "RETURN without GOSUB"
    fi
    
    CURRENT_LINE="$return_line"
    debug "RETURN to line $return_line"
}

# ===== STATEMENT MODULE =====
execute_print() {
    local args="$1"
    
    if [[ -z "$args" ]]; then
        echo
        return
    fi
    
    # Split by comma or semicolon
    local output=""
    local no_newline=false
    
    # Simple parsing - handle comma and semicolon separated values
    # For single expressions, just evaluate directly
    # Check if there are separators outside string literals
    local has_separators=false
    local i=0
    local in_string=0
    while [[ $i -lt ${#args} ]]; do
        local char="${args:$i:1}"
        if [[ "$char" == '"' ]]; then
            in_string=$((!in_string))
        elif [[ ($char == "," || $char == ";") && $in_string -eq 0 ]]; then
            has_separators=true
            break
        fi
        i=$((i + 1))
    done

    if [[ "$has_separators" == "false" ]]; then
        local value=$(evaluate_expression "$args")
        echo -e "$value"
        return
    fi
    
    # For multiple expressions, use parentheses-aware parsing
    while [[ -n "$args" ]]; do
        args=$(trim "$args")
        
        # Find the next comma or semicolon that's outside parentheses
        local paren_count=0
        local i=0
        local sep_pos=-1
        local sep_char=""
        
        while [[ $i -lt ${#args} ]]; do
            local char="${args:$i:1}"
            case "$char" in
                "(") paren_count=$((paren_count + 1)) ;;
                ")") paren_count=$((paren_count - 1)) ;;
                ","|";")
                    if [[ $paren_count -eq 0 ]]; then
                        sep_pos=$i
                        sep_char="$char"
                        break
                    fi
                    ;;
            esac
            i=$((i + 1))
        done
        
        if [[ $sep_pos -ge 0 ]]; then
            # Found separator outside parentheses
            local value="${args:0:$sep_pos}"
            args="${args:$((sep_pos + 1))}"
            
            value=$(evaluate_expression "$value")
            
            if [[ "$sep_char" == "," ]]; then
                # BASIC comma formatting: align to 14-character columns
                local current_len=${#output}
                local next_column=$(((current_len / 14 + 1) * 14))
                local spaces_needed=$((next_column - current_len))
                output="${output}$(printf '%*s' $spaces_needed '')${value}"
            else
                output="${output}${value}"
                no_newline=true
            fi
        else
            # No separator found - last item
            local value=$(evaluate_expression "$args")
            output="${output}${value}"
            break
        fi
    done
    
    if [[ "$no_newline" == "true" ]]; then
        printf "%s" "$output"
    else
        echo -e "$output"
    fi
}
execute_let() {
    local stmt="${1:-}"
    stmt=$(trim "$stmt")

    debug "execute_let called with: $stmt"

    # Handle array assignment: VARNAME(INDEX) = VALUE
    local array_assign_regex='^([A-Z][A-Z0-9_]*\$?)\(([^)]+)\)[[:space:]]*=[[:space:]]*(.*)$'
    debug "Checking array assignment regex against: $stmt"
    if [[ "$stmt" =~ $array_assign_regex ]]; then
        local array_name="${BASH_REMATCH[1]}"
        local index_expr="${BASH_REMATCH[2]}"
        local value="${BASH_REMATCH[3]}"
        debug "Array assignment matched: array_name=$array_name, index_expr=$index_expr, value=$value"
        
        # Evaluate index and value
        # Handle 2D arrays with comma-separated indices
        local index
        if [[ "$index_expr" =~ ^([^,]+),([^,]+)$ ]]; then
            # 2D array: evaluate both indices
            local index1=$(evaluate_expression "${BASH_REMATCH[1]}")
            local index2=$(evaluate_expression "${BASH_REMATCH[2]}")
            index="${index1},${index2}"
        else
            # 1D array: evaluate single index
            index=$(evaluate_expression "$index_expr")
        fi
        value=$(evaluate_expression "$value")
        
        # Check if array exists
        if [[ -z "${ARRAYS[$array_name]:-}" ]]; then
            error "Array not declared: $array_name"
        fi
        
        # Get array info
        local array_info="${ARRAYS[$array_name]}"
        local array_type="${array_info%:*}"
        local array_size="${array_info#*:}"
        
        # Check bounds
        if [[ ${index:-0} -lt 0 || ${index:-0} -gt ${array_size:-0} ]]; then
            debug "Array bounds check failed: array_name='${array_name:-UNKNOWN}', index=${index:-0}, array_size=${array_size:-0}"
            error "Array index out of bounds: ${array_name:-UNKNOWN}(${index:-0})"
        fi
        
        # Store array element
        local element_name="${array_name}_${index}"
        if [[ "$array_type" == "string" ]]; then
            STRING_VARS["$element_name"]="$value"
        else
            NUMERIC_VARS["$element_name"]="$value"
        fi
        
        debug "Set $array_name($index) = $value"
        
    # Handle regular variable assignment: VARNAME = VALUE or VARNAME% = VALUE
    elif [[ "$stmt" =~ ^([A-Z][A-Z0-9_]*\$?%?)[[:space:]]*=[[:space:]]*(.*)$ ]]; then
        local var_name="${BASH_REMATCH[1]}"
        local value="${BASH_REMATCH[2]}"
        
        value=$(evaluate_expression "$value")
        
        if [[ "$var_name" =~ \$$ ]]; then
            STRING_VARS["$var_name"]="$value"
        elif [[ "$var_name" =~ %$ ]]; then
            # Integer variable - truncate to integer
            value=$(printf "%.0f" "$value" 2>/dev/null || echo "0")
            NUMERIC_VARS["$var_name"]="$value"
        else
            NUMERIC_VARS["$var_name"]="$value"
        fi
        
        debug "Set $var_name = $value"
    else
        error "Invalid LET statement: $stmt"
    fi
}
execute_dim() {
    local stmt="${1:-}"
    stmt=$(trim "$stmt")
    
    # Arrays are already declared during pre-parsing
    # This function exists for compatibility but does nothing
    debug "DIM statement already processed during pre-parsing: $stmt"
}
execute_input() {
    local stmt="${1:-}"
    stmt=$(trim "$stmt")
    
    local prompt=""
    local var_list=""
    
    # Parse INPUT statement: INPUT "prompt", VAR or INPUT VAR
    if [[ "$stmt" =~ ^\"([^\"]*)\",[[:space:]]*(.+)$ ]]; then
        prompt="${BASH_REMATCH[1]}"
        var_list="${BASH_REMATCH[2]}"
    elif [[ "$stmt" =~ ^\"([^\"]*)\"[[:space:]]+(.+)$ ]]; then
        prompt="${BASH_REMATCH[1]}"
        var_list="${BASH_REMATCH[2]}"
    else
        var_list="$stmt"
    fi
    
    # Display prompt if provided
    if [[ -n "$prompt" ]]; then
        printf "%s" "$prompt"
    else
        printf "? "
    fi
    
    # Read input
    local input_value
    read -r input_value
    
    # Convert to uppercase if BASHIC_UPPER_CASE mode is enabled
    # Check both environment variable and BASIC variable
    local upper_case_mode="${BASHIC_UPPER_CASE:-${NUMERIC_VARS[BASHIC_UPPER_CASE]:-0}}"
    if [[ "$upper_case_mode" == "1" ]]; then
        input_value="${input_value^^}"
    fi
    
    # Parse variable list (comma-separated)
    IFS=',' read -ra vars <<< "$var_list"
    
    if [[ ${#vars[@]} -eq 1 ]]; then
        # Single variable
        local var_name=$(trim "${vars[0]}")
        
        if [[ "$var_name" =~ \$$ ]]; then
            # String variable
            STRING_VARS["$var_name"]="$input_value"
        else
            # Numeric variable
            if [[ "$input_value" =~ ^-?[0-9]+(\.[0-9]+)?$ ]]; then
                NUMERIC_VARS["$var_name"]="$input_value"
            else
                NUMERIC_VARS["$var_name"]="0"
            fi
        fi
    else
        # Multiple variables - split input by comma
        IFS=',' read -ra input_vals <<< "$input_value"
        
        local idx=0
        for var_name in "${vars[@]}"; do
            var_name=$(trim "$var_name")
            local val="${input_vals[$idx]:-}"
            val=$(trim "$val")
            
            if [[ "$var_name" =~ \$$ ]]; then
                # String variable
                STRING_VARS["$var_name"]="$val"
            else
                # Numeric variable
                if [[ "$val" =~ ^-?[0-9]+(\.[0-9]+)?$ ]]; then
                    NUMERIC_VARS["$var_name"]="$val"
                else
                    NUMERIC_VARS["$var_name"]="0"
                fi
            fi
            idx=$((idx + 1))
        done
    fi
    
    debug "INPUT: Read values into variables"
}
execute_read() {
    local stmt="${1:-}"
    stmt=$(trim "$stmt")
    
    # Parse variable list (comma-separated)
    IFS=',' read -ra vars <<< "$stmt"
    
    for var_name in "${vars[@]}"; do
        var_name=$(trim "$var_name")
        
        # Check if we have more data
        if [[ ${BASHIC_DATA_POINTER:-0} -ge ${#BASHIC_DATA_ITEMS[@]} ]]; then
            error "READ: Out of DATA"
        fi
        
        local value="${BASHIC_DATA_ITEMS[$BASHIC_DATA_POINTER]}"
        BASHIC_DATA_POINTER=$((BASHIC_DATA_POINTER + 1))
        
        # Assign to variable
        if [[ "$var_name" =~ \$$ ]]; then
            STRING_VARS["$var_name"]="$value"
        else
            NUMERIC_VARS["$var_name"]="$value"
        fi
        
        debug "READ: $var_name = $value"
    done
}
execute_restore() {
    local stmt="${1:-}"
    stmt=$(trim "$stmt")
    
    if [[ -z "$stmt" ]]; then
        # RESTORE without line number - reset to beginning
        BASHIC_DATA_POINTER=0
        debug "RESTORE: Data pointer reset to 0"
    else
        # RESTORE with line number - find the DATA statement
        local target_line=$(evaluate_expression "$stmt")
        debug "RESTORE: Looking for DATA statement at line $target_line"
        
        # Find the DATA line number that matches or is closest before target_line
        local found_pos=0
        local i=0
        while [[ $i -lt ${#BASHIC_DATA_LINES[@]} ]]; do
            local data_line="${BASHIC_DATA_LINES[$i]}"
            if [[ $data_line -le $target_line ]]; then
                found_pos="${BASHIC_DATA_START_POS[$i]}"
                debug "RESTORE: Found DATA line $data_line at position $found_pos"
            else
                break
            fi
            i=$((i + 1))
        done
        
        BASHIC_DATA_POINTER=$found_pos
        debug "RESTORE: Data pointer set to $found_pos"
    fi
}
execute_screen() {
    local mode="${1:-0}"
    mode=$(trim "$mode")
    
    # Evaluate mode if it's an expression
    local screen_mode=$(evaluate_expression "$mode")
    
    debug "SCREEN: Setting display mode to $screen_mode"
    
    case "$screen_mode" in
        0)
            # Text mode (80x25) - default terminal mode
            SCREEN_WIDTH=80
            debug "SCREEN 0: Text mode (80x25)"
            ;;
        1)
            # Medium resolution graphics (320x200) - simulate with wider terminal
            SCREEN_WIDTH=80  # Keep reasonable width for terminal
            debug "SCREEN 1: Medium resolution graphics mode (simulated)"
            ;;
        2)
            # High resolution graphics (640x200) - simulate with wider terminal
            SCREEN_WIDTH=80  # Keep reasonable width for terminal
            debug "SCREEN 2: High resolution graphics mode (simulated)"
            ;;
        3)
            # Extended text mode (80x25) - same as mode 0
            SCREEN_WIDTH=80
            debug "SCREEN 3: Extended text mode (80x25)"
            ;;
        4)
            # Very high resolution (640x400) - simulate with wider terminal
            SCREEN_WIDTH=80  # Keep reasonable width for terminal
            debug "SCREEN 4: Very high resolution graphics mode (simulated)"
            ;;
        *)
            debug "SCREEN $screen_mode: Unknown mode, defaulting to text mode"
            SCREEN_WIDTH=80
            ;;
    esac
    
    # Clear screen when changing modes (like GW-BASIC)
    screen_cls
}
execute_randomize() {
    local stmt="${1:-}"
    stmt=$(trim "$stmt")
    
    # RANDOMIZE optionally takes a seed value
    # In bash, we can't truly set RANDOM seed, but we can note it
    if [[ -n "$stmt" ]]; then
        local seed=$(evaluate_expression "$stmt")
        debug "RANDOMIZE: Seed value $seed (noted but RANDOM is not seedable in bash)"
    else
        debug "RANDOMIZE: Using default randomization"
    fi
}
execute_statement() {
    local stmt="${1:-}"
    stmt=$(trim "$stmt")
    
    push_debug_stack "execute_statement" "\"$stmt\""
    debug "Executing: $stmt"
    
    # Skip empty statements and comments
    [[ -z "$stmt" ]] && return
    [[ "$stmt" =~ ^REM ]] && return
    [[ "$stmt" =~ ^\' ]] && return
    
    # Convert to uppercase for keyword matching
    local upper_stmt="${stmt^^}"
    
    case "$upper_stmt" in
        END|STOP)
            debug "Program ended"
            BASHIC_RUNNING=false
            ;;
        CLS)
            screen_cls
            ;;
        LOCATE*)
            local args="${stmt#*LOCATE}"
            args=$(trim "$args")
            if [[ "$args" =~ ^([0-9]+),([0-9]+) ]]; then
                local row="${BASH_REMATCH[1]}"
                local col="${BASH_REMATCH[2]}"
                screen_locate "$row" "$col"
            fi
            ;;
        COLOR*)
            local args="${stmt#*COLOR}"
            args=$(trim "$args")
            if [[ "$args" =~ ^([0-9]+),([0-9]+) ]]; then
                local fg="${BASH_REMATCH[1]}"
                local bg="${BASH_REMATCH[2]}"
                screen_color "$fg" "$bg"
            elif [[ "$args" =~ ^([0-9]+) ]]; then
                local fg="${BASH_REMATCH[1]}"
                screen_color "$fg" "$CURRENT_BG_COLOR"
            fi
            ;;
        BEEP)
            screen_beep
            ;;
        WIDTH*)
            local args="${stmt#*WIDTH}"
            args=$(trim "$args")
            if [[ "$args" =~ ^([0-9]+) ]]; then
                screen_width "${BASH_REMATCH[1]}"
            fi
            ;;
        SCREEN*)
            local args="${stmt#*SCREEN}"
            args=$(trim "$args")
            execute_screen "$args"
            ;;
        KEY*|SOUND*|POKE*|PEEK*|DEF*)
            # Other GW-BASIC hardware commands - ignore (no-op stubs)
            debug "Ignoring GW-BASIC command: ${upper_stmt%% *}"
            ;;
        DATA*)
            # DATA statements are processed during pre-parsing, ignore during execution
            debug "DATA statement already processed"
            ;;
        READ*)
            local args="${stmt#*READ}"
            execute_read "$args"
            ;;
        RESTORE*)
            local args="${stmt#*RESTORE}"
            execute_restore "$args"
            ;;
        RANDOMIZE*)
            local args="${stmt#*RANDOMIZE}"
            execute_randomize "$args"
            ;;
        ON*)
            # ON...GOTO statement: ON var GOTO line1, line2, line3
            if [[ "$upper_stmt" =~ ^ON[[:space:]]+(.+)[[:space:]]+GOTO[[:space:]]+(.+)$ ]]; then
                local var_expr="${BASH_REMATCH[1]}"
                local line_list="${BASH_REMATCH[2]}"
                
                # Evaluate the variable
                local index=$(evaluate_expression "$var_expr")
                
                # Parse comma-separated line numbers
                IFS=',' read -ra lines <<< "$line_list"
                
                # Check bounds (1-based indexing in BASIC)
                if [[ $index -lt 1 || $index -gt ${#lines[@]} ]]; then
                    debug "ON GOTO: Index $index out of range (1-${#lines[@]}), ignoring"
                else
                    local target_line=$(trim "${lines[$((index - 1))]}")
                    CURRENT_LINE="$target_line"
                    debug "ON $index GOTO $target_line"
                fi
            else
                debug "ON statement (not GOTO): ignoring"
            fi
            ;;
        PRINT*)
            local args="${stmt#*PRINT}"
            execute_print "$args"
            ;;
        LET*)
            local args="${stmt#*LET}"
            execute_let "$args"
            ;;
        DIM*)
            local args="${stmt#*DIM}"
            execute_dim "$args"
            ;;
        INPUT*)
            local args="${stmt#*INPUT}"
            execute_input "$args"
            ;;
        FOR*)
            local args="${stmt#*FOR}"
            execute_for "$args"
            ;;
        NEXT*)
            execute_next "$stmt"
            ;;
        WHILE*)
            local args="${stmt#*WHILE}"
            execute_while "$args"
            ;;
        WEND*)
            execute_wend "$stmt"
            ;;
        IF*)
            local args="${stmt#*IF}"
            execute_if "$args"
            ;;
        GOTO*)
            local line_num="${stmt#*GOTO}"
            line_num=$(trim "$line_num")
            if [[ -z "${PROGRAM_LINES[$line_num]:-}" ]]; then
                error "GOTO to undefined line: $line_num"
            fi
            CURRENT_LINE="$line_num"
            debug "GOTO line $line_num"
            ;;
        GOSUB*)
            local line_num="${stmt#*GOSUB}"
            line_num=$(trim "$line_num")
            execute_gosub "$line_num"
            ;;
        RETURN)
            execute_return
            ;;
        *)
            # Check if it's an assignment without LET
            # Pattern: VARNAME[$(INDEX)] = VALUE or VARNAME = VALUE
            # Also support integer variables with % suffix: VARNAME% = VALUE
            local assign_regex='^[A-Z][A-Z0-9_]*(\$\([^)]+\)|[A-Z0-9_]*|\$|\([^)]+\)|%)?[[:space:]]*='
            debug "Checking assignment regex against: $stmt"
            if [[ "$stmt" =~ $assign_regex ]]; then
                execute_let "$stmt"
            else
                debug "Statement does not match assignment regex: $stmt"
                error "Unknown statement: $stmt"
            fi
            ;;
    esac
    
    pop_debug_stack
}

# ===== CORE MODULE =====
#!/bin/bash
# BASHIC Core Module
# bashic.core.sh - Program management, execution loop, and main function

# Load program from file
load_program() {
    local filename="$1"
    
    if [[ ! -f "$filename" ]]; then
        error "File not found: $filename"
    fi
    
    # Set up log file to match input filename
    PROGRAM_FILE="$filename"
    local basename=$(basename "$filename" .bas)
    BASHIC_LOG_FILE="${basename}.log"
    
    debug "Loading program: $filename"
    debug "Log file: $BASHIC_LOG_FILE"
    
    # Initialize keyboard handling
    init_keyboard
    
    # Initialize semaphore
    BASHIC_INKEY_SEMAPHORE=0
    debug "BASHIC_INKEY_SEMAPHORE initialized to 0"
    
    # Clear existing program
    PROGRAM_LINES=()
    NUMERIC_VARS=()
    STRING_VARS=()
    ARRAYS=()
    GOSUB_STACK=()
    FOR_STACK=()
    WHILE_STACK=()
    BASHIC_DATA_ITEMS=()
    BASHIC_DATA_POINTER=0
    BASHIC_DATA_LINES=()
    BASHIC_DATA_START_POS=()
    
    # Read program lines
    while IFS= read -r line; do
        # Skip empty lines and comments
        if [[ -z "$line" || "$line" =~ ^[[:space:]]*REM ]]; then
            continue
        fi
        
        # Extract line number and statement
        if [[ "$line" =~ ^[[:space:]]*([0-9]+)[[:space:]]+(.*)$ ]]; then
            local line_num="${BASH_REMATCH[1]}"
            local statement="${BASH_REMATCH[2]}"
            
            # Validate line number
            if [[ $line_num -gt $MAX_LINE_NUMBER ]]; then
                error "Line number too large: $line_num"
            fi
            
            # Check if statement contains colons (multi-statement line)
            # Don't split REM comments or strings
            local has_colon=false
            local upper_stmt="${statement^^}"
            
            if [[ ! "$upper_stmt" =~ ^REM && ! "$statement" =~ ^\' ]]; then
                # Check for colon outside of strings
                local in_string=0
                local i=0
                while [[ $i -lt ${#statement} ]]; do
                    local char="${statement:$i:1}"
                    if [[ "$char" == '"' ]]; then
                        in_string=$((1 - in_string))
                    elif [[ "$char" == ":" && $in_string -eq 0 ]]; then
                        has_colon=true
                        break
                    fi
                    i=$((i + 1))
                done
            fi
            
            # If no colon or REM, store as single statement (original behavior)
            if [[ "$has_colon" == "false" ]]; then
                PROGRAM_LINES[$line_num]="$statement"
            else
                # Split by colon, preserving colons in strings
                local stmts=()
                local current=""
                local in_string=0
                local i=0
                
                while [[ $i -lt ${#statement} ]]; do
                    local char="${statement:$i:1}"
                    if [[ "$char" == '"' ]]; then
                        in_string=$((1 - in_string))
                        current="${current}${char}"
                    elif [[ "$char" == ":" && $in_string -eq 0 ]]; then
                        if [[ -n "$current" ]]; then
                            stmts+=("$current")
                            current=""
                        fi
                    else
                        current="${current}${char}"
                    fi
                    i=$((i + 1))
                done
                [[ -n "$current" ]] && stmts+=("$current")
                
                # Store statements using fractional line numbers
                if [[ ${#stmts[@]} -gt 0 ]]; then
                    PROGRAM_LINES[$line_num]="${stmts[0]}"
                    
                    local stmt_idx=1
                    while [[ $stmt_idx -lt ${#stmts[@]} ]]; do
                        local sub_line="${line_num}.${stmt_idx}"
                        PROGRAM_LINES[$sub_line]="${stmts[$stmt_idx]}"
                        debug "Multi-statement: line $line_num part $stmt_idx stored as $sub_line"
                        stmt_idx=$((stmt_idx + 1))
                    done
                fi
            fi
        fi
    done < "$filename"
    
    if [[ ${#PROGRAM_LINES[@]} -eq 0 ]]; then
        error "No valid program lines found"
    fi
    
    # Pre-parse program for DIM and DATA statements
    pre_parse_program
    
    debug "Program loaded: ${#PROGRAM_LINES[@]} lines"
}

# Pre-parse program to handle DIM and DATA statements
pre_parse_program() {
    debug "Pre-parsing program for DIM and DATA statements"
    
    # Sort line numbers for DATA statement processing
    local sorted_lines
    readarray -t sorted_lines < <(printf '%s\n' "${!PROGRAM_LINES[@]}" | sort -n)
    
    for line_num in "${sorted_lines[@]}"; do
        local stmt="${PROGRAM_LINES[$line_num]}"
        local upper_stmt=$(echo "$stmt" | tr '[:lower:]' '[:upper:]')
        
        if [[ "$upper_stmt" =~ ^DIM[[:space:]]+(.*)$ ]]; then
            local args="${BASH_REMATCH[1]}"
            args=$(trim "$args")
            
            debug "DIM args: '$args'"
            
            # Split by comma, but only outside parentheses
            declare -a array_decls
            local current=""
            local paren_count=0
            local i=0
            
            while [[ $i -lt ${#args} ]]; do
                local char="${args:$i:1}"
                if [[ "$char" == "(" ]]; then
                    paren_count=$((paren_count + 1))
                    current="${current}${char}"
                elif [[ "$char" == ")" ]]; then
                    paren_count=$((paren_count - 1))
                    current="${current}${char}"
                elif [[ "$char" == "," && $paren_count -eq 0 ]]; then
                    array_decls+=("$current")
                    current=""
                else
                    current="${current}${char}"
                fi
                i=$((i + 1))
            done
            [[ -n "$current" ]] && array_decls+=("$current")
            
            debug "Found ${#array_decls[@]} array declarations"
            
            for array_decl in "${array_decls[@]}"; do
                array_decl=$(trim "$array_decl")
                
                debug "Parsing array declaration: '$array_decl'"
                
                # Parse DIM statement: ARRAY(SIZE) or ARRAY$(SIZE) or ARRAY(SIZE,SIZE) for 2D
                # For 2D arrays, we'll use the first dimension as size
                # SIZE can be a number or a variable name (for dynamic sizing)
                if [[ "$array_decl" =~ ^([A-Za-z][A-Za-z0-9_]*)(\$?)\(([A-Za-z0-9_%]+)([[:space:]]*,[[:space:]]*[A-Za-z0-9_%]+)?\)$ ]]; then
                    local array_name="${BASH_REMATCH[1]}"
                    local is_string="${BASH_REMATCH[2]}"
                    local size_expr="${BASH_REMATCH[3]}"
                    
                    # Evaluate size expression (could be a variable or number)
                    local size
                    if [[ "$size_expr" =~ ^[0-9]+$ ]]; then
                        size="$size_expr"
                    else
                        # Try to evaluate as variable
                        size="${NUMERIC_VARS[$size_expr]:-100}"
                    fi
                    
                    # Validate array size
                    if [[ $size -gt $MAX_ARRAY_SIZE ]]; then
                        error "Array size too large: $array_name($size)"
                    fi
                    
                    # Store array metadata
                    local array_type="numeric"
                    [[ -n "$is_string" ]] && array_type="string"
                    # Include $ in array name for string arrays for consistency
                    [[ -n "$is_string" ]] && array_name="${array_name}$"
                    ARRAYS[$array_name]="$array_type:$size"
                    
                    debug "DIM: $array_name($size) - $array_type"
                else
                    error "Invalid DIM statement: $stmt"
                fi
            done
        fi
        
        # Parse DATA statements
        if [[ "$upper_stmt" =~ ^DATA[[:space:]]+(.*)$ ]]; then
            local data_args="${BASH_REMATCH[1]}"
            
            # Record this DATA line and its starting position
            BASHIC_DATA_LINES+=("$line_num")
            BASHIC_DATA_START_POS+=("${#BASHIC_DATA_ITEMS[@]}")
            debug "DATA line $line_num starts at position ${#BASHIC_DATA_ITEMS[@]}"
            
            # Split by comma, preserving quoted strings
            local in_quotes=0
            local current=""
            local i=0
            
            while [[ $i -lt ${#data_args} ]]; do
                local char="${data_args:$i:1}"
                if [[ "$char" == '"' ]]; then
                    in_quotes=$((1 - in_quotes))
                    # Don't include quotes in the actual data
                elif [[ "$char" == "," && $in_quotes -eq 0 ]]; then
                    current=$(trim "$current")
                    BASHIC_DATA_ITEMS+=("$current")
                    current=""
                else
                    current="${current}${char}"
                fi
                i=$((i + 1))
            done
            
            # Add last item
            if [[ -n "$current" ]]; then
                current=$(trim "$current")
                BASHIC_DATA_ITEMS+=("$current")
            fi
            
            debug "DATA: Added ${#BASHIC_DATA_ITEMS[@]} total items so far"
        fi
    done
    
    debug "Pre-parsing complete: ${#ARRAYS[@]} arrays declared, ${#BASHIC_DATA_ITEMS[@]} DATA items"
}

# Get sorted line numbers
get_line_numbers() {
    if [[ -z "${SORTED_LINE_NUMBERS:-}" ]] || [[ ${#SORTED_LINE_NUMBERS[@]} -eq 0 ]]; then
        readarray -t SORTED_LINE_NUMBERS < <(printf '%s\n' "${!PROGRAM_LINES[@]}" | sort -n)
    fi
    
    printf '%s\n' "${SORTED_LINE_NUMBERS[@]}"
}

# Find next line number after current line
find_next_line() {
    local current="$1"
    local line_numbers
    readarray -t line_numbers < <(get_line_numbers)
    
    # Since lines are already sorted numerically (sort -n handles decimals)
    # we just need to find the first line after current
    local next=""
    local found_current=false
    
    for line in "${line_numbers[@]}"; do
        if [[ "$found_current" == "true" ]]; then
            next="$line"
            break
        fi
        if [[ "$line" == "$current" ]]; then
            found_current=true
        fi
    done
    
    echo "$next"
}

# Run program
run_program() {
    debug "Starting program execution"
    # init_log
    # log_execution "Program execution started"
    
    BASHIC_RUNNING=true
    CURRENT_LINE=0
    
    # Start with first line
    local line_numbers
    readarray -t line_numbers < <(get_line_numbers)
    
    if [[ ${#line_numbers[@]} -eq 0 ]]; then
        error "No program lines to execute"
    fi
    
    CURRENT_LINE="${line_numbers[0]}"
    
    while [[ "$BASHIC_RUNNING" == "true" ]]; do
        local stmt="${PROGRAM_LINES[$CURRENT_LINE]}"
        local saved_line="$CURRENT_LINE"
        
        # debug "Executing line $CURRENT_LINE: $stmt"
        # log_execution "Executing: $stmt"
        
        execute_statement "$stmt"
        
        if [[ "$BASHIC_RUNNING" == "true" ]]; then
            # Check if statement changed the line (GOTO, ON GOTO, etc.)
            if [[ "$CURRENT_LINE" != "$saved_line" ]]; then
                # Line was changed by control flow - use new line on next iteration
                debug "Control flow changed line from $saved_line to $CURRENT_LINE"
            else
                # Normal flow - advance to next line
                local next_line=$(find_next_line "$CURRENT_LINE")
                debug "Current line: $CURRENT_LINE, Next line: $next_line"
                if [[ -n "$next_line" ]]; then
                    CURRENT_LINE="$next_line"
                    debug "Advanced to line: $CURRENT_LINE"
                else
                    debug "No next line found - ending program"
                    BASHIC_RUNNING=false
                fi
            fi
        fi
    done
    
    debug "Program execution completed"
}

# Parse command line arguments
parse_args() {
    while [[ $# -gt 0 ]]; do
        case $1 in
            -d|--debug)
                BASHIC_DEBUG=true
                shift
                ;;
            -h|--help)
                usage
                exit 0
                ;;
            -v|--version)
                echo "BASHIC Version 1.0"
                exit 0
                ;;
            -*)
                error "Unknown option: $1"
                ;;
            *)
                if [[ -z "${PROGRAM_FILE:-}" ]]; then
                    PROGRAM_FILE="$1"
                else
                    error "Multiple program files specified"
                fi
                shift
                ;;
        esac
    done
}

# Main function
main() {
    parse_args "$@"
    
    if [[ -z "${PROGRAM_FILE:-}" ]]; then
        usage
        exit 1
    fi
    
    load_program "$PROGRAM_FILE"
    run_program
}

# Run main function with all arguments
main "$@"